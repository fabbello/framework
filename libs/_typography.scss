// ==========================================================================
//
// TYPOGRAPHY
//
// ==========================================================================
// Modified from http://typeplate.com


/* ==========================================================================
   VARIABLES
   ========================================================================== */


// $Type
// --------------------------------------------------------------------------

$line-height:           1.65                                        !default;
$line-length:           $font-size * 300 / 100                      !default;

$font-size:             112.5                                       !default;
$font-size-alt:         80                                          !default;  
$font-base:             16 * ($font-size / 100);
$font-base-alt:         16 * ($font-size-alt / 100);
$font-base-small:       80%                                         !default;
$font-ratio:            1.618                                       !default;
$font-measure:          $font-base * $line-height;

$font-family:           serif                                       !default;
$font-family-sans:      sans-serif                                  !default;
$font-weight:           normal;
$font-weight-small:     600                                         !default;

$font-properties:       $font-weight #{$font-size}%/#{$line-height} $font-family;


// $Color
// --------------------------------------------------------------------------

$color-body:            #333                                        !default;
$color-heading:         #222                                        !default;
$color-small:           $color-body                                 !default;


// $AMPERSAND @font-face
// --------------------------------------------------------------------------

$amp-fontface-name: Ampersand;
$amp-fontface-source: local('ACaslonPro-Italic'), local('Baskerville'), local('Palatino'), local('Book Antiqua');
$amp-fontface-fallback: local('Georgia');


// $AMPERSAND element
// --------------------------------------------------------------------------

// Allows for our ampersand element to have differing
// font-family from the ampersand unicode font-family.
$amp-font-family: $font-family;


// $AMPERSAND @font-face
// --------------------------------------------------------------------------

// @font-face {
//     font-family: '#{$amp-fontface-name}';
//     src: $amp-fontface-source;
//     unicode-range: U+0026;
// }

// Ampersand fallback font for unicode range
// @font-face {
//     font-family: '#{$amp-fontface-name}';
//     src: $amp-fontface-fallback;
//     unicode-range: U+270C;
// }


// $Type Scale Unit
// --------------------------------------------------------------------------

$type-scale-unit-value: rem;


// $Text Indentation
// --------------------------------------------------------------------------

$indent-val: 1.5em;



/* ==========================================================================
   FUNCTIONS
   ========================================================================== */

// $Function $Power
// -------------------------------------//
// factor the font-base by an exponent

@function power($base, $exponent) {
    // reset value
    $value: $base;
    
    // positive integers get multiplied
    @if $exponent > 1 {
        @for $i from 2 through $exponent {
            $value: $value * $base;
        }
    }
    
    // negative integers get divided
    @if $exponent < 1 {
        @for $i from 0 through -$exponent {
            $value: $value / $base;
        }
    }

    // return the last value written
    @return $value; 
}


// $Function $Context Calculator
// -------------------------------------//
// divide a given font-size by base font-size & return a relative value

@function context-calc($scale, $base, $value) {
    @return ($scale/$base)#{$value};
}


// $Function $Measure-Margin
// -------------------------------------//
// divide 1 unit of measure by given font-size & return a relative em value

@function measure-margin($scale, $base, $measure, $value) {
    @if $measure > $scale {
        @return ($measure - $scale) / $scale#{$value};
    }

    @if $measure == $scale {
        @return 0#{$value};
    }

    $ceiling: ceil($scale / $measure);
    $lead: $ceiling * $measure;

    @return ($lead - $scale) / $base#{$value};
}



/* ==========================================================================
   MIXINS
   ========================================================================== */


// $Type Scale
// --------------------------------------------------------------------------

@mixin type-scale($scale, $base, $value, $measure:"") {
    // If 'rem' is used as a $value then provide a px fallback.
    @if $value == rem {
        font-size: $scale#{px};
    }
    font-size: context-calc($scale, $base, $value);

    @if $measure != "" {
        margin-bottom: measure-margin($scale, $base, $measure, $value);
    }
}


// $Headings
// --------------------------------------------------------------------------

// styles for all headings, in the style of @csswizardry
%hN {
    // voodoo to enable ligatures and kerning
    text-rendering: optimizeLegibility;
    // this fixes huge spaces when a heading wraps onto two lines
    line-height: 1;
    margin-top: 0;
}

// make a multi-dimensional array, where:
// the first value is the name of the placeholder
// and the second value is the scale for the size
$sizes: tera        power($font-ratio, 4) * $font-base,
        giga        power($font-ratio, 4) * $font-base-alt,
        mega        power($font-ratio, 3) * $font-base, 
        alpha       power($font-ratio, 3) * $font-base-alt,
        beta        power($font-ratio, 2) * $font-base, 
        gamma       power($font-ratio, 2) * $font-base-alt, 
        delta       power($font-ratio, 1) * $font-base, 
        epsilon     power($font-ratio, 1) * $font-base-alt, 
        zeta        $font-base,
        eta         power($font-ratio, -1) * $font-base-alt;

// for each size in the scale, create a placeholder
@each $size in $sizes {
    %#{nth($size, 1)} {
        @include type-scale( nth($size, 2), $font-base, '#{$type-scale-unit-value}', $font-measure);
    }
}


// $Wordwrap
// --------------------------------------------------------------------------
// Silent Sass Classes - A.K.A Placeholders
//
// normal: Indicates that lines may only break at normal word break points.
// break-word : Indicates that normally unbreakable words may be broken at
// arbitrary points if there are no otherwise acceptable break points in the line.

%breakword {
    word-wrap: break-word;
}

%normal-wrap {
    word-wrap: normal;
}

%inherit-wrap {
    word-wrap: auto;
}


// $Hyphens
// --------------------------------------------------------------------------
// http://trentwalton.com/2011/09/07/css-hyphenation

@mixin css-hyphens($val) {
    // Accepted values: [ none | manual | auto ]
    -webkit-hyphens: $val;  // Safari 5.1 thru 6, iOS 4.2 thru 6
    -moz-hyphens: $val;   // Firefox 16 thru 20
    -ms-hyphens: $val;    // IE10
    -o-hyphens: $val;   // PRESTO...haha LOL
    hyphens: $val;      // W3C standard
}


// $Body Copy
// --------------------------------------------------------------------------

@mixin body-copy {
    @include css-hyphens(auto);
    @extend %breakword;
    text-align: justify;
    text-justify: inter-word;
    max-width: $line-length + em;
}


// $Font-size Adjust
// --------------------------------------------------------------------------
// correct x-height for fallback fonts: requires secret formula
// yet to be discovered. This is still wacky for support. Use
// wisely grasshopper.

@mixin font-size-adjust($adjust-value) {
    // firefox 17+ only (as of Feb. 2013)
    font-size-adjust: $adjust-value;
}


// $Smallcaps
// --------------------------------------------------------------------------
// http://blog.hypsometry.com/articles/true-small-capitals-with-font-face

@mixin smallcaps($color, $weight) {
    // depends on the font family.
    // some font-families don't support small caps
    // or don't provide them with their web font.
    font-variant: small-caps;
    font-weight: $weight;
    text-transform: lowercase;
    color: $color;
}


// $White Space
// --------------------------------------------------------------------------

@mixin white-space($wrap-space) {
    @if $wrap-space == 'pre-wrap' {
        white-space: #{-moz-}$wrap-space; // Firefox 1.0-2.0
        white-space: $wrap-space;       // current browsers
    } @else {
        white-space: $wrap-space;
    }
}


// $Ampersand
// --------------------------------------------------------------------------

@mixin ampersand($amp-font-family...) {
    font-family: $amp-fontface-name, $amp-font-family;
}


// $Dropcaps
// --------------------------------------------------------------------------
/**
 * Dropcap Sass @include
 * Use the following Sass @include with any selector you feel necessary.
 *
    @include dropcap($float: left, $font-size: 4em, $font-family: inherit, $text-indent: 0, $margin: inherit, $padding: inherit, $color: inherit, $lineHeight: 1, $bg: transparent);
 *
 * Extend this object into your custom stylesheet.
 *
 */

// Include your '@include dropcap()' mixin and pass the following
// arguments below. Feel free to pass in arguments we've provided.
// At this time you cannot pass in font-family arguments but you're gonna
// change that anyway so why not just make that separately in your declaration.
@mixin dropcap($float: left, $font-size: 4em, $font-family: inherit, $text-indent: 0, $margin: inherit, $padding: inherit, $color: inherit, $lineHeight: 1, $bg: transparent) {
    &:first-letter {
        float: $float;
        margin: $margin;
        padding: $padding;
        font-size: $font-size;
        font-family: $font-family;
        line-height: $lineHeight;
        text-indent: $text-indent;
        background: $bg;
        color: $color;
    }
}


// $Blockquote Cites
// --------------------------------------------------------------------------
/**
 * Blockquote Markup
 *
    <blockquote cite="">
        <p>&Prime;&Prime;</p>
        <cite>
            <small><a href=""></a></small>
        </cite>
    </blockquote>
 *
 * Extend this object into your markup.
 *
 */

@mixin cite-style($display:block, $text-align:right, $font-size: .875em) {
    display: $display;
    font-size: $font-size;
    text-align: $text-align;
}

%cite {
    @include cite-style;
}


// $Pull Quotes
// --------------------------------------------------------------------------
// http://24ways.org/2005/swooshy-curly-quotes-without-images
//
// http://todomvc.com - Thanks sindresorhus!
// https://github.com/typeplate/typeplate.github.com/issues/49

/**
 * Pull Quotes Markup
 *
    <aside class="pull-quote">
        <blockquote>
            <p></p>
        </blockquote>
    </aside>
 *
 * Extend this object into your custom stylesheet.
 *
 */

@mixin pull-quotes($font-size, $opacity) {
    position: relative;
    padding: context-calc($font-size, $font-size, 'rem');
    &:before,
    &:after {
        height: context-calc($font-size, $font-size, 'rem');
        opacity: $opacity;
        position: absolute;
        font-size: $font-size;
    }
    &:before {
        content: '“';
        top:  0em;
        left: 0em;
    }
    &:after {
        content: '”';
        bottom: 0em;
        right: 0em;
    }
}

%pull-quote {
    @include pull-quotes(4em, .15);
}


// $Unstyled List
// --------------------------------------------------------------------------

@mixin unstyled-list() {
    margin: 0;
    padding-left: 0;
    list-style: none;
}


// $Definition List
// --------------------------------------------------------------------------
// lining
// http://lea.verou.me/2012/02/flexible-multiline-definition-lists-with-2-lines-of-css
//
// dictionary-style
// http://lea.verou.me/2012/02/flexible-multiline-definition-lists-with-2-lines-of-css

@mixin definition-list-style($style) {
    // lining style
    @if $style == lining {
        dt,
        dd {
            display: inline;
            margin: 0;
        }
        dt,
        dd {
            & + dt {
                &:before {
                    content: "\A";
                    white-space: pre;
                }
            }
        }
        dd {
            & + dd {
                &:before {
                    content: ", ";
                }
            }
            &:before {
                    content: ": ";
                    margin-left: -0.2rem; //removes extra space between the dt and the colon
            }
        }
    }
    // dictionary-style
    @if $style == dictionary-style {
        dt {
            display: inline;
            counter-reset: definitions;
            & + dt {
                &:before {
                    content: ", ";
                    margin-left: -0.2rem; // removes extra space between the dt and the comma
                }
            }
        }
        dd {
            display: block;
            counter-increment: definitions;
            &:before {
                content: counter(definitions, decimal) ". ";
            }
        }
    }
}


/**
 * Lining Definition Style Markup
 *
    <dl class="lining">
        <dt><b></b></dt>
        <dd></dd>
    </dl>
 *
 * Extend this object into your markup.
 *
 */
%lining {
    @include definition-list-style(lining);
}

/**
 * Dictionary Definition Style Markup
 *
    <dl class="dictionary-style">
        <dt><b></b></dt>
            <dd></dd>
    </dl>
 *
 * Extend this object into your markup.
 *
 */
%dictionary-style {
    @include definition-list-style(dictionary-style);
}


// $Figures
// --------------------------------------------------------------------------

/**
 * Figures Markup
 *
    <figure>
        <figcaption>
            <strong>Fig. 4.2 | </strong>Type Anatomy, an excerpt from Mark Boulton's book<cite title="http://designingfortheweb.co.uk/book/part3/part3_chapter11.php">"Designing for the Web"</cite>
        </figcaption>
    </figure>
 *
 * Extend this object into your markup.
 *
 */


// $Footnotes
// --------------------------------------------------------------------------

/**
 * Footnote Markup : Replace 'X' with your unique number for each footnote
 *
    <article>
        <p><sup><a href="#fn-itemX" id="fn-returnX"></a></sup></p>
        <footer>
            <ol class="foot-notes">
                <li id="fn-itemX"><a href="#fn-returnX">↩</a></li>
            </ol>
        </footer>
    </article>
 *
 * Extend this object into your markup.
 *
 */


// $Extras
// --------------------------------------------------------------------------

@mixin hidden() {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

@mixin image {
    background-color: transparent;
    border: 0;
    overflow: hidden;

    &:before {
        content: "";
        display: block;
        width: 0;
        height: 150%;
    }
}


/* ==========================================================================
   TYPOGRAPHY STYLES
   ========================================================================== */


// $Globals
// --------------------------------------------------------------------------

html { font: $font-properties; }
body { color: $color-body; }


// $Headings
// --------------------------------------------------------------------------

h1,
h2,
h3,
h4,
h5,
h6 {
    @extend %hN;
    color: $color-heading;
}

// $Paragraphs
// --------------------------------------------------------------------------

p {
    @include body-copy();
    margin: 0 0 $line-height * 1em;

    & + p {
        //siblings indentation
        text-indent: $indent-val;
    }
}


// $Small
// --------------------------------------------------------------------------

small,
.small {
    font-size: $font-base-small;
}


// $Hyphens
// --------------------------------------------------------------------------
// http://meyerweb.com/eric/thoughts/2012/12/17/where-to-avoid-css-hyphenation

abbr,
acronym,
blockquote,
code,
dir,
kbd,
listing,
plaintext,
q,
samp,
tt,
var,
xmp {
    @include css-hyphens(none);
}


// $Codeblocks
// --------------------------------------------------------------------------

pre code {
    @extend %normal-wrap;
    @include white-space(pre-wrap);
}

pre {
    @include white-space(pre);
}

code {
    @include white-space(pre);
    font-family: monospace;
}

// $Abbreviations
// --------------------------------------------------------------------------

abbr {
    @include smallcaps($color-small, $font-weight-small);
    &:hover {
        cursor: help;
    }
}